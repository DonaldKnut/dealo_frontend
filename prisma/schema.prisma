// This is your merged Prisma schema file

// Define the generator for Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Define the database connection
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// Define the UserRole enum
enum UserRole {
  ADMIN
  USER
}

// Define the Account model
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Define the User model
model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole              @default(USER)
  credits             Int                   @default(10)
  accounts            Account[]             // One-to-many relationship with Account
  isTwoFactorEnabled  Boolean               @default(false)
  twoFactorConfirmation TwoFactorConfirmation?   // One-to-one relationship with TwoFactorConfirmation

  @@unique([email, role])
}

// Define the VerificationToken model
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Define the PasswordResetToken model
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Define the TwoFactorToken model
model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Define the TwoFactorConfirmation model
model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Define the Course model
model Course {
  id    String   @id @default(cuid())
  name  String
  image String
  units Unit[]   // One-to-many relationship with Unit
}

// Define the Unit model
model Unit {
  id       String   @id @default(cuid())
  courseId String
  name     String
  course   Course   @relation(fields: [courseId], references: [id])
  chapters Chapter[]   // One-to-many relationship with Chapter

  @@index([courseId], name: "courseId")
}

// Define the Chapter model
model Chapter {
  id                 String   @id @default(cuid())
  unitId             String
  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?    @db.VarChar(3000)
  unit               Unit       @relation(fields: [unitId], references: [id])
  questions          Question[]   // One-to-many relationship with Question

  @@index([unitId], name: "unitId")
}

// Define the Question model
model Question {
  id        String   @id @default(cuid())
  chapterId String
  question  String   @db.VarChar(3000)
  answer    String   @db.VarChar(3000)
  options   String   @db.VarChar(3000)
  chapter   Chapter  @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}

// Define the UserSubscription model
model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?   
  stripeCurrentPeriodEnd DateTime?
}
